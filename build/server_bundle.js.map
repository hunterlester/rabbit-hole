{"version":3,"file":"server_bundle.js","sources":["webpack:///webpack/bootstrap 79b188dd72f7abc09c1d","webpack:///server/index.js","webpack:///server/app.js","webpack:///external \"express\"","webpack:///external \"path\"","webpack:///external \"serve-favicon\"","webpack:///external \"body-parser\"","webpack:///external \"mongoose\"","webpack:///external \"passport\"","webpack:///external \"dotenv\"","webpack:///./~/dotenv/config.js","webpack:///./~/dotenv/lib/main.js","webpack:///external \"fs\"","webpack:///server/models/user.js","webpack:///external \"crypto\"","webpack:///external \"jsonwebtoken\"","webpack:///server/models/studymap.js","webpack:///server/models/link.js","webpack:///server/models/breadcrumb.js","webpack:///server/models/message.js","webpack:///server/models/echo.js","webpack:///server/models/subject.js","webpack:///server/config/passport.js","webpack:///external \"passport-local\"","webpack:///server/routes/index.js","webpack:///server/routes/users.js","webpack:///external \"express-jwt\"","webpack:///server/routes/studymaps.js","webpack:///server/state/action_creators.js","webpack:///server/routes/messages.js","webpack:///server/routes/links.js","webpack:///server/routes/breadcrumbs.js","webpack:///server/routes/echoes.js","webpack:///server/routes/subjects.js","webpack:///server/routes/notifications.js","webpack:///external \"mailgun-js\"","webpack:///external \"webpack\"","webpack:///webpack.config.js","webpack:///external \"webpack-dev-middleware\"","webpack:///external \"webpack-hot-middleware\"","webpack:///external \"http\"","webpack:///external \"debug\"","webpack:///server/state/store.js","webpack:///external \"redux\"","webpack:///external \"redux-thunk\"","webpack:///server/state/reducer.js","webpack:///server/state/core.js","webpack:///external \"immutable\"","webpack:///external \"socket.io\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 79b188dd72f7abc09c1d\n **/","import app from './app';\nimport http from 'http';\nimport debugGet from 'debug';\nconst debug = debugGet('rabbit-hole:server');\nimport makeStore from './state/store';\nimport Server from 'socket.io';\nimport mongoose from 'mongoose';\nconst Echo = mongoose.model('Echo');\nconst Subject = mongoose.model('Subject');\nconst User = mongoose.model('User');\n\nlet port = normalizePort(process.env.PORT || '3000');\n\napp.set('port', port);\n\nexport const store = makeStore();\n\nconst server = http.createServer(app);\n\nfunction startSocketServer(store) {\n  const io = new Server().attach(3001);\n\n  store.subscribe(\n    () => io.emit('state', store.getState().toJS())\n  )\n\n  io.on('connection', (socket) => {\n    socket.emit('state', store.getState().toJS());\n    socket.on('action', store.dispatch.bind(store));\n  })\n}\n\nstartSocketServer(store);\n\nlet userPromise = new Promise((fulfill, reject) => {\n  fulfill(\n    User.find().select('displayName username').exec((err, users) => {\n      if(err) throw error\n      return users;\n    })\n  )\n});\n\nlet subjectPromise = new Promise((fulfill, reject) => {\n  fulfill(\n    Subject.find((err, subjects) => {\n      if (err) throw error\n      return subjects;\n    })\n  );\n})\n\nlet echoPromise = new Promise((fulfill, reject) => {\n  fulfill(\n    Echo.find().populate(\n      [\n        {\n          path: 'studymap',\n          populate: [\n            {\n              path: 'keywords',\n              model: 'Subject'\n            }\n          ]\n        },\n        {\n          path: 'breadcrumb',\n          populate: [\n            {\n              path: 'study_map',\n              populate: [\n                {\n                  path: 'keywords',\n                  model: 'Subject'\n                }\n              ]\n            },\n            {\n              path: 'messages',\n              model: 'Message',\n              populate: [\n                {\n                  path: 'user',\n                  model: 'User'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          path: 'link',\n          populate: [\n            {\n              path: 'study_map',\n              populate: [\n                {\n                  path: 'keywords',\n                  model: 'Subject'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          path: 'message',\n          populate: [\n            {\n              path: 'user'\n            },\n            {\n              path: 'breadcrumb',\n              populate: [\n                {\n                  path: 'messages',\n                  model: 'Message',\n                  populate: [\n                    {\n                      path: 'user',\n                      model: 'User'\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              path: 'study_map',\n              populate: [\n                {\n                  path: 'keywords',\n                  model: 'Subject'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          path: 'user'\n        }\n      ]).exec((err, echoes) => {\n      if (err) throw error;\n      return echoes;\n    })\n  );\n});\n\nechoPromise.then((res) => {\n  store.dispatch({\n    type: 'SET_ECHOES',\n    echoes: res\n  });\n});\n\nsubjectPromise.then(res => {\n  store.dispatch({\n    type: 'SET_SUBJECTS',\n    subjects: res\n  });\n});\n\nuserPromise.then(res => {\n  store.dispatch({\n    type: 'SET_USERS',\n    users: res\n  })\n})\n\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\nfunction normalizePort(val) {\n  const port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    return val;\n  }\n\n  if (port >= 0) {\n    return port;\n  }\n\n  return false;\n}\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\nfunction onListening() {\n  const addr = server.address();\n  const bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** server/index.js\n **/","import express from 'express';\nconst app = express();\nimport path from 'path';\nimport favicon from 'serve-favicon';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport passport from 'passport';\nimport dotenv from 'dotenv';\nimport 'dotenv/config';\n\nmongoose.Promise = global.Promise;\n\nif(process.env.NODE_ENV == 'development') {\n  var webpack = require('webpack');\n  var webpackConfig = require('../webpack.config')[1];\n  var compiler = webpack(webpackConfig);\n\n  app.use(require(\"webpack-dev-middleware\")(compiler, {\n      noInfo: true, publicPath: webpackConfig.output.publicPath\n  }));\n\n  app.use(require(\"webpack-hot-middleware\")(compiler));\n}\n\nif(process.env.NODE_ENV == 'development') {\n  console.log('development');\n  mongoose.connect(process.env.MONGO_URI);\n}\n\nif(process.env.NODE_ENV == 'production') {\n  mongoose.connect('mongodb://10.7.0.3:27017/data/db');\n}\n\n\n// Docker Machine host ip\n// mongoose.connect('mongodb://192.168.99.100:27017/data/db');\n\n// network bridge\n// mongoose.connect('mongodb://172.18.0.2:27017/data/db');\n\n\n// DATA MODELS\n//\n//\nimport './models/user';\nimport './models/studymap';\nimport './models/link';\nimport './models/breadcrumb';\nimport './models/message';\nimport './models/echo';\nimport './models/subject';\n\n// PASSPORT CONFIGURATION\n//\n//\nimport './config/passport';\n\n// API ROUTES\n//\n//\nimport routes from './routes/index';\nimport users from './routes/users';\nimport studymaps from './routes/studymaps';\nimport messages from './routes/messages';\nimport links from './routes/links';\nimport breadcrumbs from './routes/breadcrumbs';\nimport echoes from './routes/echoes';\nimport subjects from './routes/subjects';\nimport notifications from './routes/notifications';\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(favicon(__dirname + '/public/favicon.ico'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(passport.initialize());\n\napp.use('/', routes);\napp.use('/studymaps', studymaps);\napp.use('/users', users);\napp.use('/messages', messages);\napp.use('/links', links);\napp.use('/breadcrumbs', breadcrumbs);\napp.use('/echoes', echoes);\napp.use('/subjects', subjects);\napp.use('/notify', notifications);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\napp.use(function (err, req, res, next) {\n  if (err.status === 401) {\n    res.status(401).send({error: 'Please sign in to contribute'});\n  } else {\n    next(err);\n  }\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n  console.log(err);\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\n\nexport default app;\n\n\n\n/** WEBPACK FOOTER **\n ** server/app.js\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"path\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"path\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"serve-favicon\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"serve-favicon\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = require(\"body-parser\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"body-parser\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = require(\"mongoose\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"mongoose\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = require(\"passport\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"passport\"\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = require(\"dotenv\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"dotenv\"\n ** module id = 9\n ** module chunks = 0\n **/","(function () {\n  var options = {}\n  process.argv.forEach(function (val, idx, arr) {\n    var matches = val.match(/^dotenv_config_(.+)=(.+)/)\n    if (matches) {\n      options[matches[1]] = matches[2]\n    }\n  })\n\n  require('./lib/main').config(options)\n})()\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/dotenv/config.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict'\n\nvar fs = require('fs')\n\nmodule.exports = {\n  /*\n   * Main entry point into dotenv. Allows configuration before loading .env\n   * @param {Object} options - valid options: path ('.env'), encoding ('utf8')\n   * @returns {Boolean}\n  */\n  config: function (options) {\n    var path = '.env'\n    var encoding = 'utf8'\n    var silent = false\n\n    if (options) {\n      if (options.silent) {\n        silent = options.silent\n      }\n      if (options.path) {\n        path = options.path\n      }\n      if (options.encoding) {\n        encoding = options.encoding\n      }\n    }\n\n    try {\n      // specifying an encoding returns a string instead of a buffer\n      var parsedObj = this.parse(fs.readFileSync(path, { encoding: encoding }))\n\n      Object.keys(parsedObj).forEach(function (key) {\n        process.env[key] = process.env[key] || parsedObj[key]\n      })\n\n      return parsedObj\n    } catch (e) {\n      if (!silent) {\n        console.error(e)\n      }\n      return false\n    }\n  },\n\n  /*\n   * Parses a string or buffer into an object\n   * @param {String|Buffer} src - source to be parsed\n   * @returns {Object}\n  */\n  parse: function (src) {\n    var obj = {}\n\n    // convert Buffers before splitting into lines and processing\n    src.toString().split('\\n').forEach(function (line) {\n      // matching \"KEY' and 'VAL' in 'KEY=VAL'\n      var keyValueArr = line.match(/^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$/)\n      // matched?\n      if (keyValueArr != null) {\n        var key = keyValueArr[1]\n\n        // default undefined or missing values to empty string\n        var value = keyValueArr[2] ? keyValueArr[2] : ''\n\n        // expand newlines in quoted values\n        var len = value ? value.length : 0\n        if (len > 0 && value.charAt(0) === '\\\"' && value.charAt(len - 1) === '\\\"') {\n          value = value.replace(/\\\\n/gm, '\\n')\n        }\n\n        // remove any surrounding quotes and extra spaces\n        value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n        obj[key] = value\n      }\n    })\n\n    return obj\n  }\n\n}\n\nmodule.exports.load = module.exports.config\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/dotenv/lib/main.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 12\n ** module chunks = 0\n **/","import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nconst UserSchema = new mongoose.Schema({\n  date: {type: Date, default: Date.now},\n  provider: String,\n  id: String,\n  displayName: {type: String, lowercase: true, unique: true, trim: true},\n  name: {\n    familyName: String,\n    givenName: String,\n    middleName: String\n  },\n  username: {type: String, lowercase: true, unique: true, trim: true},\n  emailConfirmed: {type: Boolean, default: false},\n  salt: String,\n  hash: String,\n  subscribed_subjects: [{type: mongoose.Schema.Types.ObjectId, ref: 'Subject'}],\n  watching: [{type: mongoose.Schema.Types.ObjectId, ref: 'User'}],\n  breadcrumbs: [{type: mongoose.Schema.Types.ObjectId, ref: 'Breadcrumbs'}],\n  study_maps: [{type: mongoose.Schema.Types.ObjectId, ref: 'StudyMap'}],\n  notifications: [{type: mongoose.Schema.Types.ObjectId, ref: 'Echo'}],\n  points: {type: Number, default: 1}\n}, {strict: false});\n\nUserSchema.methods.validPassword = function (password) {\n  const hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n\n  return this.hash === hash;\n};\n\nUserSchema.methods.setPassword = function(password) {\n  this.salt = crypto.randomBytes(16).toString('hex');\n  this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');\n};\n\nUserSchema.methods.generateTempJWT = function () {\n  const today = new Date;\n  const exp = new Date(today);\n  exp.setHours(today.getHours() + 1);\n\n  return jwt.sign({\n    _id: this._id,\n    username: this.username,\n    exp: parseInt(exp.getTime() / 1000)\n  }, process.env.JWT_TOKEN);\n};\n\nUserSchema.methods.generateJWT = function () {\n  const today = new Date;\n  const exp = new Date(today);\n  exp.setDate(today.getDate() + 60);\n\n  return jwt.sign({\n    _id: this._id,\n    username: this.username,\n    exp: parseInt(exp.getTime() / 1000)\n  }, process.env.JWT_TOKEN);\n};\n\nmongoose.model('User', UserSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/user.js\n **/","module.exports = require(\"crypto\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"crypto\"\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = require(\"jsonwebtoken\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jsonwebtoken\"\n ** module id = 15\n ** module chunks = 0\n **/","import mongoose from 'mongoose';\n\nconst StudyMapSchema = new mongoose.Schema({\n  subject: String,\n  keywords: [{type: mongoose.Schema.Types.ObjectId, ref: 'Subject'}],\n  date: {type: Date, default: Date.now},\n  user: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},\n  breadcrumbs: [{type: mongoose.Schema.Types.ObjectId, ref: 'Breadcrumb'}],\n  links: [{type: mongoose.Schema.Types.ObjectId, ref: 'Link'}]\n}, {strict: false});\n\nmongoose.model('StudyMap', StudyMapSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/studymap.js\n **/","import mongoose from 'mongoose';\n\nconst LinkSchema = new mongoose.Schema({\n  date: {type: Date, default: Date.now},\n  title: String,\n  uri: String,\n  user: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},\n  study_map: {type: mongoose.Schema.Types.ObjectId, ref: 'StudyMap'},\n  breadcrumbs: [{type: mongoose.Schema.Types.ObjectId, ref: 'Breadcrumb'}],\n  links: [{type: mongoose.Schema.Types.ObjectId, ref: 'Link'}],\n  upvote: Number\n}, {strict: false});\n\nmongoose.model('Link', LinkSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/link.js\n **/","import mongoose from 'mongoose';\n\nconst BreadcrumbSchema = new mongoose.Schema({\n  user: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},\n  link: {type: mongoose.Schema.Types.ObjectId, ref: 'Link'},\n  study_map: {type: mongoose.Schema.Types.ObjectId, ref: 'StudyMap'},\n  content: String,\n  messages: [{type: mongoose.Schema.Types.ObjectId, ref: 'Message'}],\n  date: {type: Date, default: Date.now},\n  upvote: Number,\n  seen: Boolean\n}, {strict: false});\n\nmongoose.model('Breadcrumb', BreadcrumbSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/breadcrumb.js\n **/","import mongoose from 'mongoose';\n\nconst MessageSchema = new mongoose.Schema({\n  user: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},\n  link: {type: mongoose.Schema.Types.ObjectId, ref: 'Link'},\n  study_map: {type: mongoose.Schema.Types.ObjectId, ref: 'StudyMap'},\n  breadcrumb: {type: mongoose.Schema.Types.ObjectId, ref: 'Breadcrumb'},\n  body: String,\n  upvote: Number\n});\n\nmongoose.model('Message', MessageSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/message.js\n **/","import mongoose from 'mongoose';\n\nconst EchoSchema = new mongoose.Schema({\n  date: {type: Date, default: Date.now},\n  user: {type: mongoose.Schema.Types.ObjectId, ref: 'User'},\n  studymap: {type: mongoose.Schema.Types.ObjectId, ref: 'StudyMap'},\n  breadcrumb: {type: mongoose.Schema.Types.ObjectId, ref: 'Breadcrumb'},\n  link: {type: mongoose.Schema.Types.ObjectId, ref: 'Link'},\n  message: {type: mongoose.Schema.Types.ObjectId, ref: 'Message'}\n}, {strict: false});\n\nmongoose.model('Echo', EchoSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/echo.js\n **/","import mongoose from 'mongoose';\n\nconst SubjectSchema = new mongoose.Schema({\n  creation: {type: Date, default: Date.now},\n  keyword: {type: String, lowercase: true, unique: true, trim: true},\n  summary: String,\n  count: {type: Number, default: 1}\n});\n\nmongoose.model('Subject', SubjectSchema);\n\n\n\n/** WEBPACK FOOTER **\n ** server/models/subject.js\n **/","import passport from 'passport';\nimport passportLocal from 'passport-local';\nconst LocalStrategy = passportLocal.Strategy;\nimport mongoose from 'mongoose';\nconst User = mongoose.model('User');\nconst StudyMap = mongoose.model('StudyMap');\n\npassport.use(new LocalStrategy(\n  function(username, password, done) {\n    User.findOne({username: username}).populate(\n      [\n        {\n          path: 'subscribed_subjects'\n        },\n        {path: 'study_maps', populate: [\n          {\n            path: 'keywords'\n          },\n          {\n            path: 'links',\n            populate: {\n              path: 'breadcrumbs',\n              populate: {\n                path: 'messages',\n                populate: [\n                  {\n                    path: 'user'\n                  }\n                ]\n              }\n            }\n          },\n          {\n            path: 'breadcrumbs',\n            populate: {\n              path: 'messages',\n              populate: [\n                {\n                  path: 'user'\n                }\n              ]\n            }\n          }\n        ]\n        }\n      ]\n    ).exec(\n      (err, user) => {\n        if (err) {\n          return done(err);\n        }\n        if (!user) {\n          return done(null, false, {message: 'Incorrect username'});\n        }\n        if (!user.validPassword(password)) {\n          return done(null, false, {message: 'Incorrect password'});\n        }\n        return done(null, user);\n      }\n    );\n  }\n));\n\n\n\n/** WEBPACK FOOTER **\n ** server/config/passport.js\n **/","module.exports = require(\"passport-local\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"passport-local\"\n ** module id = 23\n ** module chunks = 0\n **/","import express from 'express';\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.render('index');\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/index.js\n **/","import express from 'express';\nconst router = express.Router();\nimport passport from 'passport';\nimport mongoose from 'mongoose';\nconst User = mongoose.model('User');\nimport crypto from 'crypto';\nconst algorithm = 'aes-256-ctr';\nconst password = process.env.PASSWORD;\n\nfunction decrypt(text){\n  var decipher = crypto.createDecipher(algorithm,password)\n  var dec = decipher.update(text,'hex','utf8')\n  dec += decipher.final('utf8');\n  return dec;\n}\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.get('/', auth, (req, res) => {\n  User.find((err, users) => {\n    if (err) return res.sendStatus(404);\n    res.json(users);\n  })\n});\n\nrouter.post('/register', (req, res, next) => {\n  if (!req.body.username || !req.body.password) {\n    return res.status(400).json({message: 'Please fill out all fields'});\n  }\n\n  const user = new User;\n\n  user.username = req.body.username;\n  user.setPassword(req.body.password);\n  user.displayName = req.body.displayName;\n\n  user.save((err, user) => {\n    if (err) {\n      return next(err);\n    }\n    return res.json({\n      username: user.username,\n      _id: user._id,\n      token: user.generateTempJWT(),\n      study_maps: user.study_maps,\n      displayName: user.displayName,\n      points: user.points,\n      subscribed_subjects: user.subscribed_subjects\n    })\n  });\n});\n\nrouter.post('/login', (req, res, next) => {\n  if (!req.body.username || !req.body.password) {\n    return res.status(400).json({message: 'Please fill out all fields.'});\n  }\n\n  passport.authenticate('local', (err, user, info) => {\n    if (err) {return next(err)}\n    if(!user.emailConfirmed) {\n      return res.status(400).json({message: 'Please first confirm your email address'});\n    }\n    if (user) {\n      return res.json({\n        username: user.username,\n        _id: user._id,\n        token: user.generateJWT(),\n        study_maps: user.study_maps,\n        displayName: user.displayName,\n        points: user.points,\n        subscribed_subjects: user.subscribed_subjects\n      });\n    } else {\n      return res.status(401).json(info);\n    }\n  })(req, res, next);\n});\n\nrouter.param('userId', (req, res, next, userId) => {\n  User.findById(userId).populate([\n    {\n      path: 'study_maps',\n      populate: [\n      {\n        path: 'keywords',\n        model: 'Subject'\n      },\n      {\n        path: 'links',\n        populate: [\n          {\n            path: 'breadcrumbs',\n            populate: [\n              {\n                path: 'messages',\n                populate: [\n                  {\n                    path: 'user'\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        path: 'breadcrumbs',\n        populate: [\n          {\n            path: 'messages',\n            populate: [\n              {\n                path: 'user'\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    path: 'subscribed_subjects'\n  }\n  ]).exec((err, user) => {\n    if (err) return res.sendStatus(404);\n    req.user = user;\n    next();\n  });\n});\n\nrouter.put('/reset', (req, res) => {\n  const email = decrypt(req.body.username)\n  User.findOne({username: email}, (err, user) => {\n    if(err) return res.sendStatus(404);\n    user.setPassword(req.body.password);\n    user.save((err, user) => {\n      if(err) return res.status(500).json(err);\n      res.json({message: 'Sign in with new password'});\n    })\n  })\n})\n\nrouter.get('/:userId', auth, (req, res) => {\n  res.json(req.user);\n});\n\nrouter.put('/:userId', auth, (req, res) => {\n  req.user.update({$set: req.body}, (err) => {\n    if (err) return res.status(400).json(err);\n    res.sendStatus(200);\n  })\n});\n\nrouter.put('/confirm/:userId', (req, res) => {\n  req.user.emailConfirmed = true;\n  req.user.save((err, user) => {\n    if (err) return res.status(400).json(err);\n    res.json({message: 'Email confirmed. Welcome!'});\n  })\n});\n\nrouter.put('/subscribe/:userId', auth, (req, res) => {\n  req.user.subscribed_subjects = req.body.subscribed_subjects;\n  req.user.save((err, user) => {\n    if (err) return res.status(400).json(err);\n    user.populate([\n      {\n        path: 'subscribed_subjects'\n      }\n    ], (err, user) => {\n      res.json(user.subscribed_subjects);\n    });\n  });\n});\n\nrouter.put('/empty_subscribe/:userId', auth, (req, res) => {\n  req.user.subscribed_subjects = [];\n  req.user.save((err, user) => {\n    if (err) return res.status(400).json(err);\n    user.populate([\n      {\n        path: 'subscribed_subjects'\n      }\n    ], (err, user) => {\n      res.json(user.subscribed_subjects);\n    });\n  });\n});\n\nrouter.delete('/:userId', auth, (req, res) => {\n  req.user.remove((err) => {\n    if (err) return res.status(400).json(err);\n    res.sendStatus(200);\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/users.js\n **/","module.exports = require(\"express-jwt\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express-jwt\"\n ** module id = 26\n ** module chunks = 0\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst StudyMap = mongoose.model('StudyMap');\nconst User = mongoose.model('User');\nconst Echo = mongoose.model('Echo');\nimport {store} from '../index';\nimport {postEcho} from '../state/action_creators';\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.post('/', auth, (req, res) => {\n  const studymap = new StudyMap(req.body);\n  studymap.save((err, studymap) => {\n    if (err) return res.sendStatus(500);\n    User.findById(studymap.user, (err, user) => {\n      if (err) return res.sendStatus(404);\n      user.study_maps.push(studymap._id);\n      user.save((err) => {\n        if (err) return res.sendStatus(500);\n        var echo = new Echo();\n        echo.user = studymap.user;\n        echo.studymap = studymap._id;\n        echo.save((err, echo) => {\n          if (err) return res.status(500).json(err);\n          echo.populate([\n            {\n              path: 'studymap',\n              populate: [\n                {\n                  path: 'keywords',\n                  model: 'Subject'\n                }\n              ]\n            },\n            {\n              path: 'user'\n            }\n          ], (err, echo) => {\n            store.dispatch(postEcho(echo));\n          });\n          res.json(studymap);\n        });\n      });\n    });\n  });\n});\n\nrouter.param('studymapId', (req, res, next, studymapId) => {\n  StudyMap.findById(studymapId).populate(\n    {path: 'breadcrumbs', populate: { path: 'messages' }}\n  ).exec( (err, studymap) => {\n    if (err) return res.sendStatus(404);\n    req.studymap = studymap;\n    next();\n  });\n});\n\nrouter.get('/:studymapId', auth, (req, res) => {\n  res.json(req.studymap);\n});\n\nrouter.put('/:studymapId', auth, (req, res) => {\n  req.studymap.update({$set: req.body}, (err) => {\n      if (err) return res.status(400).json(err);\n      res.sendStatus(200);\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/studymaps.js\n **/","export function postEcho(echo) {\n  return {\n    type: 'POST_ECHO',\n    echo\n  }\n}\n\nexport function postSubject(subject) {\n  return {\n    type: 'POST_SUBJECT',\n    subject\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** server/state/action_creators.js\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst Breadcrumb = mongoose.model('Breadcrumb');\nconst Message = mongoose.model('Message');\nconst Echo = mongoose.model('Echo');\nconst User = mongoose.model('User');\nimport {store} from '../index';\nimport {postEcho} from '../state/action_creators';\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.post('/', auth, (req, res) => {\n  const message = new Message(req.body);\n  message.save((err, message) => {\n    if (err) return res.status(500).json(err);\n    message.populate(\n      [\n        {\n          path: 'user'\n        }\n      ], (err, message) => {\n        res.json(message);\n        Breadcrumb.findById(message.breadcrumb, (err, breadcrumb) => {\n          if (err) return res.sendStatus(404);\n          breadcrumb.messages.push(message._id);\n          breadcrumb.save((err) => {\n            if (err) return res.sendStatus(500);\n            var echo = new Echo();\n            echo.user = message.user._id;\n            echo.message = message._id;\n            echo.save((err, echo) => {\n              if (err) return res.status(500).json(err);\n              echo.populate([\n                {\n                  path: 'message',\n                  populate: [\n                  {\n                    path: 'study_map',\n                    populate: [\n                      {\n                        path: 'keywords',\n                        model: 'Subject'\n                      }\n                    ]\n                  },\n                  {\n                    path: 'breadcrumb',\n                    populate: [\n                      {\n                        path: 'messages',\n                        model: 'Message',\n                        populate: [\n                          {\n                            path: 'user',\n                            model: 'User'\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    path: 'user',\n                    model: 'User'\n                  }\n                ]\n                },\n                {\n                  path: 'user'\n                }\n              ], (err, echo) => {\n                const echoUserID = echo.message.study_map.user;\n                  if(echoUserID.toString() != echo.user._id.toString()) {\n                    User.findById(echoUserID, (err, user) => {\n                      if(err) return res.sendStatus(404);\n                      user.notifications.push(echo._id);\n                      user.save((err, user) => {\n                        if(err) return res.sendStatus(500);\n                      });\n                    });\n                  }\n                store.dispatch(postEcho(echo));\n              });\n            });\n          });\n        })\n      }\n    );\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/messages.js\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst StudyMap = mongoose.model('StudyMap');\nconst Link = mongoose.model('Link');\nconst Echo = mongoose.model('Echo');\nimport {store} from '../index';\nimport {postEcho} from '../state/action_creators';\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.post('/studymap', auth, (req, res) => {\n  const link = new Link(req.body);\n  link.save((err, link) => {\n    if (err) return res.sendStatus(500);\n    StudyMap.findById(link.study_map, (err, studymap) => {\n      if (err) return res.sendStatus(404);\n      studymap.links.push(link._id);\n      studymap.save((err) => {\n        if (err) return res.sendStatus(500);\n        var echo = new Echo();\n        echo.user = link.user;\n        echo.link = link._id;\n        echo.save((err, echo) => {\n          if (err) return res.status(500).json(err);\n          echo.populate([\n            {\n              path: 'link',\n              populate: [\n                {\n                  path: 'study_map',\n                  populate: [\n                    {\n                      path: 'keywords',\n                      model: 'Subject'\n                    }\n                  ]\n                }\n            ]\n            },\n            {path: 'user'}], (err, echo) => {\n            store.dispatch(postEcho(echo));\n          });\n          res.json(link);\n        });\n      });\n    });\n  });\n});\n\nrouter.param('linkId', (req, res, next, linkId) => {\n  Link.findById(linkId, (err, link) => {\n    if (err) return res.sendStatus(404);\n    req.link = link;\n    next();\n  });\n});\n\nrouter.post('/:linkId/linktolink', auth, (req, res) => {\n  const sublink = new Link(req.body);\n  sublink.save((err, sublink) => {\n    if (err) return res.sendStatus(500);\n    req.link.links.push(sublink._id);\n    req.link.save((err) => {\n      if (err) res.status(500).json(err);\n      res.json(sublink);\n    });\n  });\n});\n\nrouter.put('/:linkId', auth, (req, res) => {\n  req.link.update({$set: req.body}, (err) => {\n      if (err) return res.status(400).json(err);\n      res.sendStatus(200);\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/links.js\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst StudyMap = mongoose.model('StudyMap');\nconst User = mongoose.model('User');\nconst Breadcrumb = mongoose.model('Breadcrumb');\nconst Link = mongoose.model('Link');\nconst Echo = mongoose.model('Echo');\nimport {store} from '../index';\nimport {postEcho} from '../state/action_creators';\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.post('/studymap', auth, (req, res) => {\n  const breadcrumb = new Breadcrumb(req.body);\n  breadcrumb.save((err, breadcrumb) => {\n    if (err) return res.status(500).json(err);\n    StudyMap.findById(breadcrumb.study_map, (err, studymap) => {\n      if (err) return res.sendStatus(404);\n      studymap.breadcrumbs.push(breadcrumb._id);\n      studymap.save((err, studymap) => {\n        if (err) return res.status(500).json(err);\n        var echo = new Echo();\n        echo.user = breadcrumb.user;\n        echo.breadcrumb = breadcrumb._id;\n        echo.save((err, echo) => {\n          if (err) return res.status(500).json(err);\n          echo.populate([\n            {\n              path: 'breadcrumb',\n              populate: [\n                {\n                  path: 'study_map',\n                  populate: [\n                    {\n                      path: 'keywords',\n                      model: 'Subject'\n                    }\n                  ]\n                },\n                {\n                  path: 'messages',\n                  model: 'Message'\n                }\n              ]\n          },\n          {\n            path: 'user'\n          }\n        ], (err, echo) => {\n          if (err) return res.status(500).json(err);\n          const echoUserID = echo.breadcrumb.study_map.user;\n            store.dispatch(postEcho(echo));\n          });\n          res.json(breadcrumb);\n        });\n      });\n    });\n  });\n});\n\nrouter.post('/link', auth, (req, res) => {\n  const breadcrumb = new Breadcrumb(req.body);\n  breadcrumb.save((err, breadcrumb) => {\n    if (err) return res.status(500).json(err);\n    Link.findById(breadcrumb.link, (err, link) => {\n      if (err) return res.sendStatus(404);\n      link.breadcrumbs.push(breadcrumb._id);\n      link.save((err) => {\n        if (err) return res.status(500).json(err);\n        var echo = new Echo();\n        echo.user = breadcrumb.user;\n        echo.breadcrumb = breadcrumb._id;\n        echo.save((err, echo) => {\n          if (err) return res.status(500).json(err);\n          echo.populate([\n            {\n              path: 'breadcrumb',\n              populate: [\n                {\n                  path: 'study_map',\n                  populate: [\n                    {\n                      path: 'keywords',\n                      model: 'Subject'\n                    },\n                    {\n                      path: 'messages',\n                      model: 'Message'\n                    }\n                  ]\n                }\n              ]\n            },\n            {path: 'user'}], (err, echo) => {\n              store.dispatch(postEcho(echo));\n          });\n          res.json(breadcrumb);\n        });\n      });\n    });\n  });\n});\n\nrouter.param('breadcrumbId', (req, res, next, breadcrumbId) => {\n  Breadcrumb.findById(breadcrumbId, (err, breadcrumb) => {\n    if (err) return res.sendStatus(404);\n    req.breadcrumb = breadcrumb;\n    next();\n  });\n});\n\nrouter.put('/seen/:breadcrumbId', auth, (req, res) => {\n  req.breadcrumb.seen = true;\n  req.breadcrumb.save((err, data) => {\n      if (err) return res.status(400).json(err);\n      res.json(data);\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/breadcrumbs.js\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst Echo = mongoose.model('Echo');\n\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\n\nrouter.get('/', (req, res) => {\n  Echo.find().populate([\n    {\n      path: 'studymap',\n      populate: [\n        {\n          path: 'keywords',\n          model: 'Subject'\n        }\n      ]\n    },\n    {\n      path: 'breadcrumb',\n      populate: [\n        {\n          path: 'study_map',\n          populate: [\n            {\n              path: 'keywords',\n              model: 'Subject'\n            }\n          ]\n        }\n      ]\n    },\n    {\n      path: 'link',\n      populate: [\n        {\n          path: 'study_map',\n          populate: [\n            {\n              path: 'keywords',\n              model: 'Subject'\n            }\n          ]\n        }\n      ]\n    },\n    {\n      path: 'message',\n      populate: [\n        {\n          path: 'breadcrumb'\n        },\n        {\n          path: 'study_map',\n          populate: [\n            {\n              path: 'keywords',\n              model: 'Subject'\n            }\n          ]\n        }\n      ]\n    },\n    {path: 'user'}]).exec((err, echoes) => {\n    if (err) return res.status(404).json(err);\n    res.json(echoes);\n  });\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/echoes.js\n **/","import express from 'express';\nconst router = express.Router();\nimport mongoose from 'mongoose';\nconst Subject = mongoose.model('Subject');\nimport {store} from '../index';\nimport {postSubject} from '../state/action_creators';\n\nrouter.get('/', (req, res) => {\n  Subject.find((err, subjects) => {\n    if (err) return res.sendStatus(404);\n    res.json(subjects);\n  })\n});\n\nrouter.post('/', (req, res) => {\n  var subject = new Subject(req.body);\n  subject.save((err, subject) => {\n    if(err) return res.sendStatus(500);\n    store.dispatch(postSubject(subject));\n    res.json(subject);\n  })\n});\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/subjects.js\n **/","import express from 'express';\nvar Mailgun = require('mailgun-js');\nconst router = express.Router();\nimport jwt from 'express-jwt';\nconst auth = jwt({secret: process.env.JWT_TOKEN, userProperty: 'payload'});\nimport crypto from 'crypto';\n\nconst algorithm = 'aes-256-ctr';\nconst password = process.env.PASSWORD;\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher(algorithm,password)\n  var crypted = cipher.update(text,'utf8','hex')\n  crypted += cipher.final('hex');\n  return crypted;\n}\n\nfunction decrypt(text){\n  var decipher = crypto.createDecipher(algorithm,password)\n  var dec = decipher.update(text,'hex','utf8')\n  dec += decipher.final('utf8');\n  return dec;\n}\n\nconst mailgun_key = process.env.MAILGUN_KEY;\nconst domain = process.env.MAIL_DOMAIN;\nconst sender = process.env.MAIL_SENDER;\n\nrouter.get('/reset/:email', (req, res) => {\n\n  var mailgun = new Mailgun({apiKey: mailgun_key, domain: domain});\n\n  const encryptedEmail = encrypt(req.params.email);\n\n  var data = {\n    from: `Learnimus <${sender}>`,\n    to: req.params.email,\n    subject: 'Password Reset',\n    html: `<h5>Have you requested to reset your password?</h5> <a href=\"http://52.37.27.5/#/reset/${encryptedEmail}\" target=\"_blank\">Click to confirm</a> <br><br><br> <h5>Otherwise, ignore this email</h5>`\n  };\n\n  mailgun.messages().send(data, function(err, body) {\n    if(err) {\n      console.log(\"error: \", err);\n      res.status(500).json(err);\n    } else {\n      res.json({message: 'Confirmation to reset password sent'});\n    }\n  });\n})\n\nrouter.get('/confirm/:email/:userId', auth, (req, res) => {\n  var mailgun = new Mailgun({apiKey: mailgun_key, domain: domain});\n\n  var data = {\n    from: `Learnimus <${sender}>`,\n    to: req.params.email,\n    subject: 'Please confirm your email address',\n    html: `<h3>Welcome to the Learnimus Community!</h3> <a href=\"http://52.37.27.5/#/confirm/${req.params.userId}\" target=\"_blank\">Please confirm that this is your email address.</a> <br><br><br><br> <a href=\"#\" target=\"_blank\">\"I didn't register my email with Learnimus\"</a>`\n  };\n\n  mailgun.messages().send(data, function(err, body) {\n    if(err) {\n      console.log(\"error: \", err);\n      res.status(500).json(err);\n    } else {\n      res.json({message: 'Verification sent to your address'});\n    }\n  });\n})\n\nexport default router;\n\n\n\n/** WEBPACK FOOTER **\n ** server/routes/notifications.js\n **/","module.exports = require(\"mailgun-js\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"mailgun-js\"\n ** module id = 35\n ** module chunks = 0\n **/","module.exports = require(\"webpack\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"webpack\"\n ** module id = 36\n ** module chunks = 0\n **/","var webpack = require('webpack');\nvar path = require('path');\nvar fs = require('fs');\n\nvar nodeModules = {};\nfs.readdirSync('node_modules')\n  .filter(function(x) {\n    return ['.bin'].indexOf(x) === -1;\n  })\n  .forEach(function(mod) {\n    nodeModules[mod] = 'commonjs ' + mod;\n  });\n\n// Development instructions\n// 'devtool == eval' in development\n// ONLY FOR target = 'web'\n// uncomment webpack-hot-middleware/client in entry\n// add 'react-hot!' to loader where test = jsx\n// uncomment new webpack.HotModuleReplacementPlugin in plugins\n\n// FOR PRODUCTION\n// devtool : 'cheap-module-source-map'\n\nmodule.exports = [\n  {\n    devtool: 'cheap-module-source-map',\n    target: 'node',\n    node: {\n      __dirname: true\n    },\n    entry: [\n      './server/index.js'\n    ],\n    query: {\n      presets: ['es2015']\n    },\n    module: {\n      loaders: [\n        {\n          test: /\\.js$/,\n          loader: 'babel',\n          exclude: /node_modules/\n        }\n      ]\n    },\n    resolve: {\n      extensions: ['', '.js']\n    },\n    output: {\n      path: __dirname + \"/build\",\n      publicPath: '/',\n      filename: 'server_bundle.js'\n    },\n    externals: nodeModules,\n    plugins: [\n      new webpack.BannerPlugin('require(\"source-map-support\").install();', { raw: true, entryOnly: false })\n    ]\n  },\n  {\n    target: 'web',\n    devtool: 'cheap-module-source-map',\n    entry: [\n      // 'webpack-hot-middleware/client',\n      './client/index.jsx'\n    ],\n    target: 'web',\n    module: {\n      loaders: [\n        {\n          test: /\\.jsx?$/,\n          exclude: /node_modules/,\n          loader: 'babel'\n        },\n        {\n          test: /\\.css$/,\n          loader: 'style!css!autoprefixer'\n        },\n        { test: /\\.(woff|woff2)$/,  loader: \"url-loader?limit=10000&mimetype=application/font-woff\" },\n        { test: /\\.ttf$/,    loader: \"file-loader\" },\n        { test: /\\.eot$/,    loader: \"file-loader\" },\n        { test: /\\.svg$/,    loader: \"file-loader\" }\n      ]\n    },\n    resolve: {\n      alias: {\n        'react': path.join(__dirname, 'node_modules', 'react')\n      },\n      extensions: ['', '.js', '.jsx']\n    },\n    output: {\n      path: __dirname + '/server/public/',\n      publicPath: '/',\n      filename: 'webpack_bundle.js'\n    },\n    plugins: [\n      // new webpack.HotModuleReplacementPlugin(),\n      new webpack.NoErrorsPlugin(),\n      new webpack.DefinePlugin({\n        'process.env': {\n          'NODE_ENV': JSON.stringify('production')\n        }\n      }),\n      new webpack.optimize.UglifyJsPlugin({\n        compress: {\n          warnings: false\n        }\n      }),\n      new webpack.optimize.DedupePlugin(),\n      new webpack.optimize.OccurenceOrderPlugin()\n    ]\n  }\n];\n\n\n\n/** WEBPACK FOOTER **\n ** webpack.config.js\n **/","module.exports = require(\"webpack-dev-middleware\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"webpack-dev-middleware\"\n ** module id = 38\n ** module chunks = 0\n **/","module.exports = require(\"webpack-hot-middleware\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"webpack-hot-middleware\"\n ** module id = 39\n ** module chunks = 0\n **/","module.exports = require(\"http\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"http\"\n ** module id = 40\n ** module chunks = 0\n **/","module.exports = require(\"debug\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"debug\"\n ** module id = 41\n ** module chunks = 0\n **/","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from './reducer';\n\nexport default function makeStore() {\n  return createStore(reducer);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** server/state/store.js\n **/","module.exports = require(\"redux\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"redux\"\n ** module id = 43\n ** module chunks = 0\n **/","module.exports = require(\"redux-thunk\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"redux-thunk\"\n ** module id = 44\n ** module chunks = 0\n **/","import {setEchoes, postEcho, setSubjects, postSubject, setUsers, reserveNewUserInfo} from './core';\nimport { initialState } from './core';\n\nexport default function reducer(state = initialState , action) {\n  switch (action.type) {\n    case 'SET_ECHOES':\n      return setEchoes(state, action.echoes);\n\n    case 'POST_ECHO':\n      return postEcho(state, action.echo);\n\n    case 'SET_SUBJECTS':\n      return setSubjects(state, action.subjects);\n\n    case 'POST_SUBJECT':\n      return postSubject(state, action.subject);\n\n    case 'SET_USERS':\n      return setUsers(state, action.users);\n\n    case 'REGISTER_SUCCESS':\n      return reserveNewUserInfo(state, action.user);\n\n  }\n  return state;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** server/state/reducer.js\n **/","import {fromJS, Map} from 'immutable';\n\nexport const initialState = Map();\n\nexport function setEchoes(state, echoes) {\n  return state.set('echoes', fromJS(echoes));\n}\n\nexport function postEcho(state, echo) {\n  const echoes = state.get('echoes');\n  return state.merge({\n    echoes: echoes.push(fromJS(echo))\n  })\n}\n\nexport function setSubjects(state, subjects) {\n  return state.set('subjects', fromJS(subjects));\n}\n\nexport function postSubject(state, subject) {\n  const subjects = state.get('subjects');\n  return state.merge({\n    subjects: subjects.push(fromJS(subject))\n  })\n}\n\nexport function setUsers(state, users) {\n  return state.set('users', fromJS(users));\n}\n\nexport function reserveNewUserInfo(state, user) {\n  const userObj = Object.assign({}, {\n    _id: user._id,\n    displayName: user.displayName,\n    username: user.username\n  });\n  const users = state.get('users');\n  return state.merge({\n    users: users.push(fromJS(userObj))\n  })\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** server/state/core.js\n **/","module.exports = require(\"immutable\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"immutable\"\n ** module id = 47\n ** module chunks = 0\n **/","module.exports = require(\"socket.io\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"socket.io\"\n ** module id = 48\n ** module chunks = 0\n **/"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AAJA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAZA;AAyBA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAHA;AAeA;AACA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAHA;AAgBA;AACA;AAEA;AACA;AAFA;AAHA;AArBA;AAiCA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACrNA;AACA;;;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;AAmCA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAIA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AApEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;AClIA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjFA;;;;;;;;ACAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;;AC5DA;;;;;;ACAA;;;;;;;;ACAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;ACXA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;;;;ACbA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;;;;ACbA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;ACXA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;ACXA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;;ACTA;AACA;;;AAAA;AACA;;;AACA;AACA;;;;;AAFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AADA;AAKA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AAFA;AAFA;AAeA;AACA;AACA;AACA;AAEA;AADA;AAHA;AAFA;AAlBA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AC5DA;;;;;;;;;;;;ACAA;AACA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;;;AACA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAUA;AACA;;;;;AAhBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AADA;AAHA;AAHA;AAHA;AAmBA;AACA;AAEA;AACA;AAEA;AADA;AAHA;AAHA;AAzBA;AAyCA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpMA;;;;;;;;;;;;ACAA;AACA;;;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;AATA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrEA;AAOA;AAPA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;ACZA;AACA;;;AACA;AACA;;;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAHA;AAgBA;AACA;AAFA;AA3BA;AAkCA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC3FA;AACA;;;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;AATA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAHA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7EA;AACA;;;AACA;AACA;;;AAKA;AACA;AAAA;AACA;AACA;AACA;;;;;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAFA;AAZA;AAmBA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAPA;AAHA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxHA;AACA;;;AACA;AACA;;;AAEA;AACA;;;;;AALA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAHA;AAeA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAHA;AAeA;AACA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAFA;AAHA;AANA;AAkBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrEA;AACA;;;AACA;AACA;;;AACA;AACA;AAAA;AACA;;;AALA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AACA;;;AAEA;AACA;;;AACA;AACA;;;;;AALA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtEA;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AASA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA9BA;AAmCA;AACA;AACA;;AAEA;AAxCA;AA4CA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAPA;AAkBA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AAHA;;AAOA;AAEA;AACA;AADA;AADA;AAMA;AACA;AADA;AADA;;;;;;;ACtGA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;ACIA;AACA;AALA;AACA;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;;;;;;;ACLA;;;;;;ACAA;;;;;;;;;;;ACGA;AACA;AAJA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;;;;;;;;;;;;;ACpBA;AAIA;AAOA;AAIA;AAOA;AAIA;AACA;AA/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AAIA;;;;;;ACzCA;;;;;;ACAA;;;","sourceRoot":""}